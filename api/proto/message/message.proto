syntax = "proto3";
package message;

// Client is the service used for any client-facing requests.
service ClientService {
  rpc Process(Message) returns (Response) {}
}

// ServiceType indicates which service used to generate this message.
enum ServiceType {
  CONSENSUS = 0;
  CLIENT_SUPPORT = 3;
}

// MessageType indicates what is the type of this message.
enum MessageType {
  ANNOUNCE = 0;
  PREPARE = 1;
  PREPARED = 2;
  COMMIT = 3;
  COMMITTED = 4;
  VIEWCHANGE = 5;
  NEWVIEW = 6;
}

// This is universal message for all communication protocols.
// There are different Requests for different message types.
// As we introduce a new type of message just add a new MessageType and new type of request in Message.
//
// The request field will be either one of the structure corresponding to the MessageType type.
message Message {
  ServiceType service_type = 1;
  MessageType type = 2;
  bytes signature = 3;
  oneof request {
      ConsensusRequest consensus = 4;
      ViewChangeRequest viewchange = 5;
  }
}

message Response {
  ServiceType service_type = 1;
  MessageType type = 2;
}

message ConsensusRequest {
  uint64 view_id = 1;
  uint64 block_num = 2;
  uint32 shard_id = 3;
  bytes block_hash = 4;
  bytes block = 5;
  bytes sender_pubkey = 6;
  bytes payload = 7;
}

message ViewChangeRequest {
    uint64 view_id = 1;
    uint64 block_num = 2;
    uint32 shard_id = 3;
    bytes sender_pubkey = 4;
    bytes leader_pubkey = 5;
    bytes payload = 6; // message payload: either m1 type or m2 type
    bytes viewchange_sig = 7; // signature on payload
    bytes viewid_sig = 8; // signature on view_id
    // below is for newview message only
    // only need 1 valid m1 type message which is in payload
    bytes m2_aggsigs = 9; // m2: |nil|
    bytes m2_bitmap = 10;
    bytes m3_aggsigs = 11; // m3: |viewID|
    bytes m3_bitmap= 12;
}
