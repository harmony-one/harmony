// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_rawdb is a generated GoMock package.
package mock_rawdb

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabaseReader is a mock of DatabaseReader interface
type MockDatabaseReader struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseReaderMockRecorder
}

// MockDatabaseReaderMockRecorder is the mock recorder for MockDatabaseReader
type MockDatabaseReaderMockRecorder struct {
	mock *MockDatabaseReader
}

// NewMockDatabaseReader creates a new mock instance
func NewMockDatabaseReader(ctrl *gomock.Controller) *MockDatabaseReader {
	mock := &MockDatabaseReader{ctrl: ctrl}
	mock.recorder = &MockDatabaseReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseReader) EXPECT() *MockDatabaseReaderMockRecorder {
	return m.recorder
}

// Has mocks base method
func (m *MockDatabaseReader) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has
func (mr *MockDatabaseReaderMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockDatabaseReader)(nil).Has), key)
}

// Get mocks base method
func (m *MockDatabaseReader) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDatabaseReaderMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabaseReader)(nil).Get), key)
}

// MockDatabaseWriter is a mock of DatabaseWriter interface
type MockDatabaseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseWriterMockRecorder
}

// MockDatabaseWriterMockRecorder is the mock recorder for MockDatabaseWriter
type MockDatabaseWriterMockRecorder struct {
	mock *MockDatabaseWriter
}

// NewMockDatabaseWriter creates a new mock instance
func NewMockDatabaseWriter(ctrl *gomock.Controller) *MockDatabaseWriter {
	mock := &MockDatabaseWriter{ctrl: ctrl}
	mock.recorder = &MockDatabaseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseWriter) EXPECT() *MockDatabaseWriterMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockDatabaseWriter) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockDatabaseWriterMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDatabaseWriter)(nil).Put), key, value)
}

// MockDatabaseDeleter is a mock of DatabaseDeleter interface
type MockDatabaseDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseDeleterMockRecorder
}

// MockDatabaseDeleterMockRecorder is the mock recorder for MockDatabaseDeleter
type MockDatabaseDeleterMockRecorder struct {
	mock *MockDatabaseDeleter
}

// NewMockDatabaseDeleter creates a new mock instance
func NewMockDatabaseDeleter(ctrl *gomock.Controller) *MockDatabaseDeleter {
	mock := &MockDatabaseDeleter{ctrl: ctrl}
	mock.recorder = &MockDatabaseDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseDeleter) EXPECT() *MockDatabaseDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockDatabaseDeleter) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDatabaseDeleterMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabaseDeleter)(nil).Delete), key)
}
