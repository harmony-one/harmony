{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "the purpose of this application is to provide all APIs needed\nto interact with harmony",
    "title": "harmony API.",
    "contact": {
      "name": "John Whitton",
      "url": "https://johnwhitton.dev",
      "email": "john@johnwhitton.come"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "host": "localhost:9599",
  "basePath": "/",
  "paths": {
    "/": {
      "get": {
        "description": "Returns the number of connected peers",
        "produces": [
          "application/json"
        ],
        "operationId": "PeerCount",
        "parameters": [
          {
            "type": "p2p.Host",
            "description": "the network peer to peer host",
            "name": "net",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "description": "the network version",
            "name": "NetworkVersion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "number of connected peers",
            "schema": {
              "type": "string",
              "format": "hexutil.Uint"
            }
          }
        }
      }
    },
    "/net_version": {
      "get": {
        "description": "Returns the network version",
        "operationId": "net_version",
        "responses": {
          "200": {
            "$ref": "#/responses/NetworkVersion"
          }
        }
      }
    }
  },
  "definitions": {
    "Host": {
      "type": "object",
      "title": "Host is the client + server in p2p network.",
      "properties": {
        "AllTopics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Topic"
          }
        },
        "GetID": {
          "$ref": "#/definitions/ID"
        },
        "GetP2PHost": {
          "$ref": "#/definitions/Host"
        },
        "GetPeerCount": {
          "type": "integer",
          "format": "int64"
        },
        "GetSelfPeer": {
          "$ref": "#/definitions/Peer"
        }
      },
      "x-go-package": "github.com/harmony-one/harmony/p2p"
    },
    "ID": {
      "description": "Peer IDs are derived by hashing a peer's public key and encoding the\nhash output as a multihash. See IDFromPublicKey for details.",
      "type": "string",
      "title": "ID is a libp2p peer identity.",
      "x-go-package": "github.com/libp2p/go-libp2p-core/peer"
    },
    "Multiaddr": {
      "description": "Multiaddrs have both a binary and string representation.\n\nimport ma \"github.com/multiformats/go-multiaddr\"\n\naddr, err := ma.NewMultiaddr(\"/ip4/1.2.3.4/tcp/80\")\nerr non-nil when parsing failed.",
      "type": "object",
      "title": "Multiaddr is a cross-protocol, cross-platform format for representing\ninternet addresses. It emphasizes explicitness and self-description.\nLearn more here: https://github.com/multiformats/multiaddr",
      "allOf": [
        {
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "type": "object"
        },
        {
          "description": "Multiaddrs have both a binary and string representation.\n\nimport ma \"github.com/multiformats/go-multiaddr\"\n\naddr, err := ma.NewMultiaddr(\"/ip4/1.2.3.4/tcp/80\")\nerr non-nil when parsing failed.",
          "type": "object",
          "title": "Multiaddr is a cross-protocol, cross-platform format for representing\ninternet addresses. It emphasizes explicitness and self-description.\nLearn more here: https://github.com/multiformats/multiaddr",
          "allOf": [
            {
              "type": "object"
            },
            {
              "type": "object"
            },
            {
              "type": "object"
            },
            {
              "type": "object"
            },
            {
              "type": "object"
            },
            {
              "type": "object"
            }
          ],
          "properties": {
            "Bytes": {
              "description": "Bytes returns the []byte representation of this Multiaddr\n\nThis function may expose immutable, internal state. Do not modify.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8"
              }
            },
            "Protocols": {
              "description": "Protocols returns the list of Protocols this Multiaddr includes\nwill panic if protocol code incorrect (and bytes accessed incorrectly)",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol"
              }
            },
            "String": {
              "description": "String returns the string representation of this Multiaddr\n(may panic if internal state is corrupted)",
              "type": "string"
            }
          }
        }
      ],
      "properties": {
        "Bytes": {
          "description": "Bytes returns the []byte representation of this Multiaddr\n\nThis function may expose immutable, internal state. Do not modify.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          }
        },
        "Protocols": {
          "description": "Protocols returns the list of Protocols this Multiaddr includes\nwill panic if protocol code incorrect (and bytes accessed incorrectly)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Protocol"
          }
        },
        "String": {
          "description": "String returns the string representation of this Multiaddr\n(may panic if internal state is corrupted)",
          "type": "string"
        }
      },
      "x-go-package": "github.com/multiformats/go-multiaddr"
    },
    "Peer": {
      "description": "Peer is the object for a p2p peer (node)",
      "type": "object",
      "properties": {
        "Addrs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Multiaddr"
          }
        },
        "ConsensusPubKey": {
          "$ref": "#/definitions/PublicKey"
        },
        "IP": {
          "type": "string"
        },
        "PeerID": {
          "$ref": "#/definitions/ID"
        },
        "Port": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/harmony-one/harmony/p2p"
    },
    "Protocol": {
      "type": "object",
      "title": "Protocol is a Multiaddr protocol description structure.",
      "properties": {
        "Code": {
          "description": "Code is the protocol's multicodec (a normal, non-varint number).",
          "type": "integer",
          "format": "int64"
        },
        "Name": {
          "description": "Name is the string representation of the protocol code. E.g., ip4,\nip6, tcp, udp, etc.",
          "type": "string"
        },
        "Path": {
          "description": "Path indicates a path protocol (e.g., unix). When parsing multiaddr\nstrings, path protocols consume the remainder of the address instead\nof stopping at the next forward slash.\n\nSize must be LengthPrefixedVarSize.",
          "type": "boolean"
        },
        "Size": {
          "description": "Size is the size of the argument to this protocol.\n\nSize == 0 means this protocol takes no argument.\nSize \u003e  0 means this protocol takes a constant sized argument.\nSize \u003c  0 means this protocol takes a variable length, varint\nprefixed argument.",
          "type": "integer",
          "format": "int64"
        },
        "Transcoder": {
          "$ref": "#/definitions/Transcoder"
        },
        "VCode": {
          "description": "VCode is a precomputed varint encoded version of Code.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          }
        }
      },
      "x-go-package": "github.com/multiformats/go-multiaddr"
    },
    "PublicKey": {
      "description": "PublicKey --",
      "type": "object",
      "x-go-package": "github.com/harmony-one/bls/ffi/go/bls"
    },
    "Topic": {
      "description": "Topic is the handle for a pubsub topic",
      "type": "object",
      "x-go-package": "github.com/libp2p/go-libp2p-pubsub"
    },
    "Transcoder": {
      "type": "object",
      "x-go-package": "github.com/multiformats/go-multiaddr"
    }
  },
  "responses": {
    "NetworkVersion": {
      "description": "An NetworkVersion response  model.\n\nThis is used to offer network related RPC methods",
      "schema": {
        "$ref": "#/definitions/Host"
      },
      "headers": {
        "net": {
          "description": "The net peer to peer host\n\nin: path\nrequired: false"
        },
        "networkVersion": {
          "type": "integer",
          "format": "uint64",
          "description": "The network Version\n\nin: path\nrequired: false"
        }
      }
    }
  }
}